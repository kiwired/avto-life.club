// Mixin
// ========================================================================

rem(value, base = base-body-font-size)
	if (value is 'auto' || value is 'inherit' || typeof(value) is not 'unit')
		return value;

	u = unit(value);

	if (u is 'px')
		return unit(value / base, 'rem');
	else
		return unit(value, u);


// rem(value, base = base-body-font-size)
// 	unit = unit(value)
// 	if (unit is 'px')
// 		return unit(value/base, 'rem')
// 	else
// 		return unit(value, unit)


hidpi()
	@media only screen and (min-device-pixel-ratio: 1.5), only screen and (min-resolution: 144dpi)
		{block}


screen-medium()
	@media only screen and (min-width: breakpoint-medium)
		{block}

flexbox()
	.flexbox &
		{block}

svg()
	.svg &
		{block}

is-rtl()
	html[dir="rtl"] &
		{block}


clearfix()
	&:before,
	&:after
		content: ""
		display: table

	&:after
		clear: both

hide()
	overflow: hidden
	position: absolute
	clip: rect(0 0 0 0)
	clip-path: inset(50%)
	height: 1px
	width: 1px
	margin: -1px
	padding: 0
	border: 0
	opacity: 0
	background transparent
	white-space: nowrap

icon()
	font-family: icon-font-family;
	font-style: normal;
	text-rendering: auto;
	text-decoration: none;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;

accelerate(name)
	will-change name
	transform translateZ(0)
	backface-visibility hidden
	perspective 1000px

grid-size(padding = base-margin)
	margin-left: -(padding)
	> *
		padding-left: padding

input-size(height, padding, font-size = base-body-font-size)
	font-size: rem(font-size)
	line-height: 1.4
	min-height: height
	padding: (sub(height, font-size * 1.4) / 2) padding

button-size(height, padding, font-size = base-body-font-size)
	font-size: rem(font-size)
	line-height: 1
	padding: rem(sub(height, font-size) / 2) (rem(padding))

button-modifier(c, background)
	color: c
	background background
	border-color background

	&.button-inverse
		color: background
		background transparent
		border-color background

	&.button-link
		color: background
		background transparent
		border-color transparent

	&:hover,
	&:focus,
	&.active,
	&:disabled
		color c
		background darken(background, 15%)
		border-color @background

		&.button-inverse
			color c
			background background
			border-color background

		&.button-link
			color darken(background, 15%)
			background transparent
			border-color transparent

	// &.active
	// 	background-image: linear-gradient(45deg, alpha(#fff, .15) 25%, transparent 25%, transparent 50%, alpha(#fff, .15) 50%, alpha(#fff, .15) 75%, transparent 75%, transparent)
	// 	background-size: 40px 40px
	// 	background-position-x: 0

	// 	animation: button-bg 1.15s linear infinite


placeholder()
	&:-ms-input-placeholder
		{block}
	&::-moz-placeholder
		{block}
	&::-webkit-input-placeholder
		{block}


// Math
// ========================================================================

// add(a, b)
//  a + b
add(a, b = a)
	a = unit(a, px)
	b = unit(b, px)
	a + b

sub(a, b)
	a - b

invoke(a, b, fn)
	fn(a, b)


// font-size(size)
// 	font-size: rem(size)

// width(size)
// 	width: rem(size)

// height(size)
// 	height: rem(size)

// margin(args)
// 	// args = split(' ', size)
// 	remified = ();

// 	for arg in args {
// 		push(remified, rem(arg));
// 	}
	
// 	return remified;

// padding()
// 	remified = ();

// 	for arg in arguments {
// 		push(remified, rem(arg));
// 	}

// 	return remified;
